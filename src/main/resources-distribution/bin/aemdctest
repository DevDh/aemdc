#!/bin/sh
#
#----------------------------------------------------------------------------
#AEMDC Test Batch script
#
#Required:
#------------------
#  Lazybones project creator installation.
#----------------------------------------------------------------------------

TESTVALID=true

# define test directory
TESTDIR="aemdctest"
TESTPROJECT="my-test-project"
TESTPAEMDC_FILES="aemdc-files"

# delete old test directory
if [ -d  "$TESTDIR" ] ; then
  if [ -d  "$TESTDIR/$TESTPROJECT" ] ; then
    read -r -p "Would you like to delete test directory $TESTDIR/$TESTPROJECT? (y/n)" TESTDIR_DELETE

    if [ "y" = "$TESTDIR_DELETE" ] ; then
      rm -rf "$TESTDIR/$TESTPROJECT"
      echo "$TESTPROJECT deleted."
    else
      echo "Error: please delete test project."
      exit 1
    fi
  fi

  if [ -d  "$TESTDIR/$TESTPAEMDC_FILES" ] ; then
    read -r -p "Would you like to delete test directory $TESTDIR/$TESTPAEMDC_FILES? (y/n)" TESTDIR_DELETE
    if [ "y" = "$TESTDIR_DELETE" ] ; then
      rm -rf "$TESTDIR/$TESTPAEMDC_FILES"
      echo "$TESTPAEMDC_FILES deleted."
    fi
  fi
else
  # create "aemdctest" dir
  mkdir -p "$TESTDIR"
fi

# change to "aemdctest" dir
cd "$TESTDIR"

# create "my-test-project" using the Lazybones project creator.
echo "Starting to create "my-test-project" using the Lazybones project creator..."
lazybones create aem-multimodule-project my-test-project -PgroupId=com.headwire.myaem -PartifactId=my-test-project -PuseNewNamingConvention=yes -PbundleInBundlesDirectory=no -PbundleArtifactId=my-test-project.core -PcontentArtifactId=my-test-project.ui.apps -Pversion=1.0.0-SNAPSHOT -PprojectName="My AEM Project" -PpackageGroup=my-test-project -PaemVersion=6.2 -PappsFolderName=my-test-project -PcontentFolderName=my-test-project -PcreateEditableTemplatesStructure=yes -PconfFolderName=my-test-project -PcreateDesign=yes -PdesignFolderName=my-test-project -PcreateMainClientLib=yes -PcreateDependenciesClientLib=no -PenableCodeQuality=no -PcreateRunModeConfigFolders=no -PcreateAuthorAndPublishPerEnv=no -PreconfigureRootMapping=no -PincludeAcsAemCommons=no -PusingSlingModels=yes -PslingModelsPackage=com.headwire.myaem.core.model -PpurgeDamWorkflows=no

cd $TESTPROJECT

# create aemdc-config.properties
aemdc config

# create and check TEMPLATE
aemdc template contentpage homepage "jcr:title=Home"

# TEMPLATE check
TARGETDIR="ui.apps/src/main/content/jcr_root/apps/my-test-project/templates/homepage"
if [ ! -f  "$TARGETDIR/.content.xml" ] ; then
  TESTVALID=false
  echo "ERROR: there is no template definition in the target directory $TARGETDIR/.content.xml"
fi
if [ ! -f  "$TARGETDIR/thumbnail.png" ] ; then
  TESTVALID=false
  echo "ERROR: there is no template thumbnail in the target directory $TARGETDIR/thumbnail.png"
fi


# create and check COMPONENT
aemdc component component-page page/page "jcr:title=CompContentPage"
aemdc component component-js content/CompJS "jcr:title=CompJSTitle"
aemdc component component-model content/hero "jcr:title=Hero Title" "comp-model=com.headwire.myaem.model.impl.HeroImpl"

# COMPONENT check
TARGETDIR="ui.apps/src/main/content/jcr_root/apps/my-test-project/components"
if [ ! -f  "$TARGETDIR/page/page/.content.xml" ] ; then
  TESTVALID=false
  echo "ERROR: there is no component definition in the target directory $TARGETDIR/page/page/.content.xml"
fi
if [ ! -f  "$TARGETDIR/content/CompJS/.content.xml" ] ; then
  TESTVALID=false
  echo "ERROR: there is no component definition in the target directory $TARGETDIR/content/CompJS/.content.xml"
fi
if [ ! -f  "$TARGETDIR/content/hero/.content.xml" ] ; then
  TESTVALID=false
  echo "ERROR: there is no component definition in the target directory $TARGETDIR/content/hero/.content.xml"
fi


# create and check OSGI
aemdc osgi osgi.pid com.day.cq.mypkg.impl.MyService "runmode=author.prod" "ph_osgi.pid_1:mobile.resourceTypes=[my-test-project/components/medianewsletter]" "ph_osgi.pid_1:README=Use these configuration settings to indicate..."

# OSGI check
TARGETDIR="ui.apps/src/main/content/jcr_root/apps/my-test-project/config.author.prod"
if [ ! -f  "$TARGETDIR/com.day.cq.mypkg.impl.MyService.xml" ] ; then
  TESTVALID=false
  echo "ERROR: there is no osgi config definition in the target directory $TARGETDIR/com.day.cq.mypkg.impl.MyService.xml"
fi


# create and check PAGE
aemdc page siteroot my-test-site "jcr:title=My Site Root Page"

# PAGE check
TARGETDIR="ui.apps/src/main/content/jcr_root/content/my-test-site"
if [ ! -f  "$TARGETDIR/.content.xml" ] ; then
  TESTVALID=false
  echo "ERROR: there is no Content Page definition in the target directory $TARGETDIR/.content.xml"
fi


# create and check CONFIG STRUCTURE
aemdc confstr project my-test-project "jcr:title=My TEST Project"
aemdc confstr project-with-template-type my-test-project2 "ranking={Long}5"

# CONFIG STRUCTURE check
TARGETDIR="ui.apps/src/main/content/jcr_root/conf/my-test-project"
if [ ! -f  "$TARGETDIR/.content.xml" ] ; then
  TESTVALID=false
  echo "ERROR: there is no Editable Template Structure definition in the target directory $TARGETDIR/.content.xml"
fi

TARGETDIR="ui.apps/src/main/content/jcr_root/conf/my-test-project2/settings/wcm/template-types/aemdc-page"
if [ ! -f  "$TARGETDIR/.content.xml" ] ; then
  TESTVALID=false
  echo "ERROR: there is no Editable Template Type definition in the target directory $TARGETDIR/.content.xml"
fi


# create and check MODEL
aemdc model wcmusepojo hero
aemdc model resourcemodel list/graphicList

# MODEL check
TARGETDIR="core/src/main/java/com/headwire/myaem/core/model"
if [ ! -f  "$TARGETDIR/Hero.java" ] ; then
  TESTVALID=false
  echo "ERROR: there is no model definition in the target directory $TARGETDIR/Hero.java"
fi
if [ ! -f  "$TARGETDIR/impl/HeroImpl.java" ] ; then
  TESTVALID=false
  echo "ERROR: there is no model definition in the target directory $TARGETDIR/impl/HeroImpl.java"
fi
if [ ! -f  "$TARGETDIR/list/GraphicList.java" ] ; then
  TESTVALID=false
  echo "ERROR: there is no model definition in the target directory $TARGETDIR/list/GraphicList.java"
fi
if [ ! -f  "$TARGETDIR/list/impl/GraphicListImpl.java" ] ; then
  TESTVALID=false
  echo "ERROR: there is no model definition in the target directory $TARGETDIR/list/impl/GraphicListImpl.java"
fi


# create and check SERVICE
aemdc service sample mysample
aemdc service sample mysample2/MySampleService

# SERVICE check
TARGETDIR="core/src/main/java/com/headwire/myaem/core/service"
if [ ! -f  "$TARGETDIR/Mysample.java" ] ; then
  TESTVALID=false
  echo "ERROR: there is no service definition in the target directory $TARGETDIR/Mysample.java"
fi
if [ ! -f  "$TARGETDIR/impl/MysampleImpl.java" ] ; then
  TESTVALID=false
  echo "ERROR: there is no service definition in the target directory $TARGETDIR/impl/MysampleImpl.java"
fi
if [ ! -f  "$TARGETDIR/mysample2/MySampleService.java" ] ; then
  TESTVALID=false
  echo "ERROR: there is no service definition in the target directory $TARGETDIR/mysample2/MySampleService.java"
fi
if [ ! -f  "$TARGETDIR/mysample2/impl/MySampleServiceImpl.java" ] ; then
  TESTVALID=false
  echo "ERROR: there is no service definition in the target directory $TARGETDIR/mysample2/impl/MySampleServiceImpl.java"
fi

# create and check SERVLET
aemdc servlet safemethods test
aemdc servlet safemethods safes/impl/SampleSafeMethodsServlet

# SERVLET check
TARGETDIR="core/src/main/java/com/headwire/myaem/core/servlet"
if [ ! -f  "$TARGETDIR/Test.java" ] ; then
  TESTVALID=false
  echo "ERROR: there is no servlet definition in the target directory $TARGETDIR/Test.java"
fi
if [ ! -f  "$TARGETDIR/safes/impl/SampleSafeMethodsServlet.java" ] ; then
  TESTVALID=false
  echo "ERROR: there is no servlet definition in the target directory $TARGETDIR/safes/impl/SampleSafeMethodsServlet.java"
fi


# create and check im TEMP folder
aemdc -temp=temp/folder config
aemdc -temp=temp/folder component component-page page/myTempCompPage "jcr:title=CompPage"
aemdc -temp=temp/folder model wcmusepojo myhero/TempHero

# TEMP folder check
TARGETDIR="temp/folder"
if [ ! -f  "$TARGETDIR/aemdc-config.properties" ] ; then
  TESTVALID=false
  echo "ERROR: there is no config definition in the target directory $TARGETDIR/aemdc-config.properties"
fi
TARGETDIR="temp/folder/ui.apps/src/main/content/jcr_root/apps/my-test-project/components"
if [ ! -f  "$TARGETDIR/page/myTempCompPage/.content.xml" ] ; then
  TESTVALID=false
  echo "ERROR: there is no component definition in the target directory $TARGETDIR/page/myTempCompPage/.content.xml"
fi
TARGETDIR="temp/folder/core/src/main/java/com/headwire/myaem/core/model"
if [ ! -f  "$TARGETDIR/myhero/TempHero.java" ] ; then
  TESTVALID=false
  echo "ERROR: there is no model definition in the target directory $TARGETDIR/myhero/TempHero.java"
fi
if [ ! -f  "$TARGETDIR/myhero/impl/TempHeroImpl.java" ] ; then
  TESTVALID=false
  echo "ERROR: there is no model definition in the target directory $TARGETDIR/myhero/impl/TempHeroImpl.java"
fi


# create and check COMPOUND
aemdc compound component-and-model page/MyHeroComp "java-class=MyHero"
aemdc compound component-and-model page/MyComps/MyList

# COMPOUND check
TARGETDIR="ui.apps/src/main/content/jcr_root/apps/my-test-project/components"
if [ ! -f  "$TARGETDIR/page/MyHeroComp/.content.xml" ] ; then
  TESTVALID=false
  echo "ERROR: there is no component definition in the target directory $TARGETDIR/page/MyHeroComp/.content.xml"
fi
if [ ! -f  "$TARGETDIR/page/MyComps/MyList/.content.xml" ] ; then
  TESTVALID=false
  echo "ERROR: there is no component definition in the target directory $TARGETDIR/page/MyComps/MyList/.content.xml"
fi
TARGETDIR="core/src/main/java/com/headwire/myaem/core/model"
if [ ! -f  "$TARGETDIR/page/MyHero.java" ] ; then
  TESTVALID=false
  echo "ERROR: there is no model definition in the target directory $TARGETDIR/page/MyHero.java"
fi
if [ ! -f  "$TARGETDIR/page/impl/MyHeroImpl.java" ] ; then
  TESTVALID=false
  echo "ERROR: there is no model definition in the target directory $TARGETDIR/page/impl/MyHeroImpl.java"
fi
if [ ! -f  "$TARGETDIR/page/mycomps/MyList.java" ] ; then
  TESTVALID=false
  echo "ERROR: there is no model definition in the target directory $TARGETDIR/page/mycomps/MyList.java"
fi
if [ ! -f  "$TARGETDIR/page/mycomps/impl/MyListImpl.java" ] ; then
  TESTVALID=false
  echo "ERROR: there is no model definition in the target directory $TARGETDIR/page/mycomps/impl/MyListImpl.java"
fi


# create and check FILTER
aemdc filter threadlocal MyThreadLocal
aemdc filter slingrequest MySlingRequestFilter
aemdc filter slinginclude mypkg/MySlingIncludeFilter
aemdc filter slinginclude my-minus-pkg/MyFilter

# FILTER check
TARGETDIR="core/src/main/java/com/headwire/myaem/core/filter"
if [ ! -f  "$TARGETDIR/MyThreadLocalService.java" ] ; then
  TESTVALID=false
  echo "ERROR: there is no filter service definition in the target directory $TARGETDIR/MyThreadLocalService.java"
fi
if [ ! -f  "$TARGETDIR/impl/MyThreadLocalFilter.java" ] ; then
  TESTVALID=false
  echo "ERROR: there is no filter definition in the target directory $TARGETDIR/impl/MyThreadLocalFilter.java"
fi
if [ ! -f  "$TARGETDIR/impl/MySlingRequestFilter.java" ] ; then
  TESTVALID=false
  echo "ERROR: there is no filter definition in the target directory $TARGETDIR/impl/MySlingRequestFilter.java"
fi
if [ ! -f  "$TARGETDIR/myminuspkg/impl/MyFilter.java" ] ; then
  TESTVALID=false
  echo "ERROR: there is no filter definition in the target directory $TARGETDIR/myminuspkg/impl/MyFilter.java"
fi


# LAST CHECK MESSAGE 
if [ "false" = "$TESTVALID" ] ; then
  echo "ERROR: not all tests are valid"
  exit 1
fi
echo "Congratulation! All tests are valid."
